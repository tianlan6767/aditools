{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-06-07T17:06:53.370929Z",
     "start_time": "2023-06-07T17:06:51.390020Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import api"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 预处理"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json读取"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG119\\remove_empty.json\"\n",
    "api.read_json_api(jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 现场采集标注重命名"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别采集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">现场按工艺类别采集，每个文件夹以工艺命名<br />类别名必须改成英文(e.g.开裂 -> KL),一个文件夹只有一个标注</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 56/56 [00:04<00:00, 11.69it/s]\n",
      "100%|██████████████████████████████████████████████████████████████████████████████████| 22/22 [00:01<00:00, 12.75it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-13 15:37:18:success save json: \\\\Ds418\\NAS5\\A-PAD-new\\ann_data\\20230512\\rename_classify.json \u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"\\\\Ds418\\NAS5\\A-PAD-new\\ann_data\\20230512\"\n",
    "dst = img_path\n",
    "api.rename_classify_folder_api(img_path, dst, start=\"PAD_1L_0512_NG_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按产品号采集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">现场按照产品号采集，每个产品号文件夹有n张图片和1个json</p> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"\\\\Ds418\\NAS5\\A-PAD-new\\ann_data\\20230511\\新建文件夹\"\n",
    "dst = img_path\n",
    "api.rename_product_folder_api(img_path, dst, start=\"laptop_C1_1105_1_CJ_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 单文件夹采集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">最常用的采集方式,只有1个文件夹,里面有n张图片和1个json</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 26/26 [00:00<00:00, 46.44it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-26 10:23:14:success save json: D:\\pad_before\\addng\\rename_one_folder.json \u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\pad_before\\addng\\ce\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = r\"D:\\pad_before\\addng\"\n",
    "api.rename_one_folder_api(img_path, jf, dst,start=\"PAD_2B_0525_outer_PICK_NG_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 纠正中文名错误"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-07-01 10:31:19:success save json: \\\\Ds418\\NAS3\\A-ZK-4\\raw_data\\20230627\\0626白数据\\自检4_83_4G蓝色\\缺陷图\\检出_out\\correct_name.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"\\\\Ds418\\NAS3\\A-ZK-4\\raw_data\\20230627\\0626白数据\\自检4_83_4G蓝色\\缺陷图\\检出\"\n",
    "jf = r\"\\\\Ds418\\NAS3\\A-ZK-4\\raw_data\\20230627\\0626白数据\\自检4_83_4G蓝色\\缺陷图\\检出\\via_export_json - 2023-06-26T195128.904.json\"\n",
    "dst = img_path+\"_out\"\n",
    "api.correct_img_json_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OK图重命名"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 重命名图片"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████| 208/208 [00:00<00:00, 2273.91it/s]\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"D:\\pad_before\\addok\\zhu\"\n",
    "dst = img_path\n",
    "api.rename_img_api(img_path, dst, start=\"PAD_2B_0525_inner_PICK_OK_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 重命名图片+生成标注"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">常用于负样本生成</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:00<00:00, 33.14it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-06-01 11:44:58:success save json: C:\\Users\\lubin\\Desktop\\images\\ok-pcs.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"C:\\Users\\lubin\\Desktop\\images\"\n",
    "dst = img_path\n",
    "api.rename_img_json_api(img_path,dst, start=\"\")#PAD_B_0109_OK_PAD_2B_0511_PICK_inner_OK_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## JSON操作"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json合并"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-26 13:57:00:success save json: D:\\pad_before\\train\\del\\data_merge.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf_path = r\"D:\\pad_before\\train\\del\"\n",
    "api.merge_json_api(jf_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json覆盖"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-12 18:20:36:success save json: C:\\Users\\lubin\\Desktop\\1\\data_cover.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "old_jf = r\"C:\\Users\\lubin\\Desktop\\1\\data_merge.json\"\n",
    "new_jf = r\"C:\\Users\\lubin\\Desktop\\1\\via_to_json.json\"\n",
    "dst = os.path.dirname(old_jf)\n",
    "api.json_cover_api(old_jf, new_jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json删除小面积"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf_path = r\n",
    "api.del_small_area_api(jf_path, min_area=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json筛选类别"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-06-29 19:04:14:success save json: D:\\project\\pad_before\\train\\images\\NG\\filter_labels.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG\\ng.json\"\n",
    "api.filter_labels_api(jf, labels=[1,19])#8,10,11,12,13,14,15 1,2,3,4,5,7,13,14    17,18,19"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json删除空值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-06-29 19:05:19:success save json: D:\\project\\pad_before\\train\\images\\NG\\remove_empty.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import api\n",
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG\\filter_labels.json\"\n",
    "api.del_empty_key_api(jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 分段标注"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">将json中长宽比大于limit_rate的标注分段</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 65/65 [00:05<00:00, 12.10it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-03-30 14:47:17:success save json: C:\\Users\\lubin\\Desktop\\line\\split_mask.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import api\n",
    "jf = r\"C:\\Users\\lubin\\Desktop\\line\\filter_json.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "limit_rate=13  # 限制长宽比\n",
    "api.split_limit_mask_api(img_path, jf,limit_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json 复制"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">确保一个文件夹中的图片都是一个点位，及只包含一张图片的json</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\222\\via_export_json (7).json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.copy_via_api(jf,img_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json 映射复制"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">映射json需包含所需点位的标注信息,标签可以默认全为1</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_0124_729-1_1_12.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_0250_730-1_1_17.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_0922_735-3_1_1.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1185_737-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1212_738-1_1_11.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1406_739-3_1_1.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1610_741-1_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1651_741-3_1_12.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1911_743-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2153_745-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2188_746-1_1_19.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2268_746-3_1_3.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2376_747-3_1_11.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2516_748-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2636_749-3_1_8.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3028_753-1_1_12.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3121_753-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3363_755-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3707_758-3_1_11.jpg,或检查映射json有无该点位标注 \u001b[0m\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'regions'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_90772\\526383604.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mjf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34mr\"D:\\PAD\\sel_img1\\ann_7.json\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mimg_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdirname\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mapi\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmatch_point_json_api\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mD:\\code\\AdiTool\\api.py\u001b[0m in \u001b[0;36mmatch_point_json_api\u001b[1;34m(jf, img_path)\u001b[0m\n\u001b[0;32m    126\u001b[0m     \u001b[0mjson_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mread_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    127\u001b[0m     \u001b[0mimgs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mload_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"img\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 128\u001b[1;33m     \u001b[0mnew_json\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmatch_point_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjson_data\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mimgs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    129\u001b[0m     \u001b[0msave_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnew_json\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'mapper'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    130\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py\u001b[0m in \u001b[0;36mmatch_point_json\u001b[1;34m(json_data, imgs)\u001b[0m\n\u001b[0;32m    238\u001b[0m             \u001b[0mLogger\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0merror\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"点位提取失败，请检查图片名 {},或检查映射json有无该点位标注\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    239\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mold_dj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjson_format\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'VIA'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 240\u001b[1;33m         \u001b[0mnew_json\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mjson_to_via\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimgs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_json\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    241\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mnew_json\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_convert.py\u001b[0m in \u001b[0;36mjson_to_via\u001b[1;34m(imgs, json_data)\u001b[0m\n\u001b[0;32m    127\u001b[0m         \u001b[0mnew_json\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"filename\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    128\u001b[0m         \u001b[0mnew_json\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"size\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msize\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 129\u001b[1;33m         \u001b[0mregions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"regions\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    130\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mregion\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mregions\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    131\u001b[0m             \u001b[0mregion\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shape_attributes\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"name\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"polygon\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'regions'"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\PAD\\sel_img1\\ann_7.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.match_point_json_api(jf,img_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## json格式转换"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json => via"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-22 17:33:03:success save json: D:\\pad_before\\train\\add\\zhu\\json_to_via.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\pad_before\\train\\add\\zhu\\remove_empty.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.json_to_via_api(img_path, jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### via => json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">VIA标注软件格式去除后缀</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-22 17:23:34:success save json: D:\\pad_before\\train\\add\\via_to_json.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\pad_before\\train\\add\\via_export_json (3).json\"\n",
    "api.via_to_json_api(jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json => yolo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████████| 175/175 [00:08<00:00, 20.10it/s]\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG119\\images\\test\\filter_json.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = os.path.dirname(img_path)+\"\\labels\"\n",
    "api.json_to_yolo_api(img_path, jf, dst,seg=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 绘制标注"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div>\n",
    "<div style=\"float:left\">\n",
    "  <table border=\"2\" cellspacing=\"10\">\n",
    "    <tr>\n",
    "        <th align=\"left\">参数名</th> \n",
    "        <th align=\"left\">参数值</th> \n",
    "        <th align=\"left\">参数说明</th> \n",
    "    </tr>\n",
    "    <tr>\n",
    "    <td align=\"left\" rowspan=\"2\"><b>shape</b></td>\n",
    "      <td align=\"center\">POLYGON</td>\n",
    "      <td align=\"left\">多边形</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"center\">RECT</td>\n",
    "      <td align=\"left\">矩形</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\" rowspan=\"2\"><b>color</b></td>\n",
    "      <td align=\"center\">False</td>\n",
    "      <td align=\"left\">默认标注json绿色，推理json红色</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"center\">(255,0,0)</td>\n",
    "      <td align=\"left\">颜色信息</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\" rowspan=\"2\"><b>classid</b></td>\n",
    "      <td align=\"center\">False</td>\n",
    "      <td align=\"left\">默认全标签</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"center\">[1,2]</td>\n",
    "      <td align=\"left\">绘制id列表</td> \n",
    "    </tr>\n",
    "  </table>\n",
    "</div>\n",
    "\n",
    "<div style=\"margin-left:10px\"> \n",
    "  <table border=\"2\" cellspacing=\"10\" >\n",
    "    <tr>\n",
    "        <th align=\"left\">参数名</th> \n",
    "        <th align=\"left\">参数值</th> \n",
    "        <th align=\"left\">参数说明</th> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\" ><b>label</b></td>\n",
    "      <td align=\"center\">False/True</td>\n",
    "      <td align=\"left\">标签</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\"><b>score</b></td>\n",
    "      <td align=\"center\">False/True</td> \n",
    "      <td align=\"left\">得分</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\"><b>area</b></td>\n",
    "      <td align=\"center\">False/True</td> \n",
    "      <td align=\"left\">面积</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\"><b>font_size</b></td>\n",
    "      <td align=\"center\">INT</td> \n",
    "      <td align=\"left\">字体大小</td> \n",
    "    </tr>  \n",
    "  </table>\n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 38/38 [00:01<00:00, 27.14it/s]\n"
     ]
    }
   ],
   "source": [
    "import api\n",
    "jf = r\"C:\\Users\\lubin\\Desktop\\images\\0522\\Jmodel_0459999.json.json\"\n",
    "inf_jf = r\"C:\\Users\\lubin\\Desktop\\images\\0522\\Jmodel_0461999.json.json\"\n",
    "img_path = r\"C:\\Users\\lubin\\Desktop\\images\\0522\"\n",
    "dst = img_path+\"_rect\"\n",
    "draw_cfg_list = [{\"shape\":\"RECT\",\"label\":True,\"score\":False,\"area\":False,\"color\":(0,255,0),\"font_size\":1,\"classid\":False},\n",
    "                 {\"shape\":\"POLYGON\",\"label\":True,\"score\":False,\"area\":False,\"color\":(0,0,255),\"font_size\":1,\"classid\":False}]\n",
    "api.draw_mask_api(img_path, jfs=[jf,inf_jf], draw_cfg_list=draw_cfg_list,dst=dst, spotcheck=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## 移动筛选"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 根据图片过滤json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-26 13:51:22:success save json: D:\\pad_before\\train\\images\\NG\\2\\filter_json.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\pad_before\\train\\images\\NG\\via_to_json.json\"\n",
    "img_path = r\"D:\\pad_before\\train\\images\\NG\\2\"\n",
    "dst = img_path\n",
    "api.filter_json_by_img_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 根据json筛选图片"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG\\remove_empty.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = r\"D:\\project\\pad_before\\train\\images\\NG119\"\n",
    "api.move_img_by_json_api(img_path, jf, dst, move=\"copy\")  # \"move\" | \"copy\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 切分ng/ok图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">img_path为空时只会切分为ng.json/ok.json <br/>img_path不为空时会将图片也切分NG/OK文件夹</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-06-25 10:13:53:success save json: D:\\project\\pad_before\\train\\images\\ng.json \u001b[0m\n",
      "\u001b[1;34m [INFO]--> 2023-06-25 10:13:54:success save json: D:\\project\\pad_before\\train\\images\\ok.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\data_merge.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.split_ng_ok_api(img_path, jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 筛选jpg对应的bmp图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jpg_path = r\"\"\n",
    "img_path = r\"\"\n",
    "dst = jpg_path\n",
    "api.move_bmp_by_jpg_api(jpg_path,img_path,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 图像处理"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 分割"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">相关参数路径：dpp/dataset/transforms/config.yaml</p>\n",
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"0\">\n",
    "        <tr>\n",
    "          <th align=\"left\">分割方式</th>\n",
    "          <th align=\"left\"></th>\n",
    "          <th align=\"left\">config.yaml参数说明</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\" rowspan=\"2\">AvgSeg</td>\n",
    "          <td align=\"center\" rowspan=\"2\">等比分割</td>\n",
    "          <td align=\"left\">crop_size：均分大小</td> \n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">extra：FILL(填充), DROP(丢弃),KEEP(保留)</td> \n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">JsonSeg</td>\n",
    "          <td align=\"center\">软件配置文件分割</td>\n",
    "          <td align=\"left\">jfs：软件每个工位配置文件json</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">CeSeg</td>\n",
    "          <td align=\"center\">3工位侧面相机分割</td>\n",
    "          <td align=\"left\">start,end：自定义起始分割位置</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">Cv2Seg</td>\n",
    "          <td align=\"center\">边缘提取</td>\n",
    "          <td align=\"left\">二值化，卷积等参数</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">ThreeSeg</td>\n",
    "          <td align=\"center\">后盖3工位3000*4096分割</td>\n",
    "          <td align=\"left\">参数固定</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████████| 156/156 [00:13<00:00, 11.85it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-24 21:15:46:success save json: D:\\pad_before\\addok_segment\\segment.json \u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "import api,os\n",
    "jf = r\"D:\\pad_before\\addok\\polygon.json\"\n",
    "src = os.path.dirname(jf)\n",
    "jf = None\n",
    "dst = src+\"_segment\"\n",
    "api.img_segment_api(\"AvgSeg\", src, jf, dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 合并"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\"> 由于同一批数据会多次执行,dst要以 \"_xx\" 命名,新生成的图片名会以 \"_\" 后的名称添加后缀</p>\n",
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <th align=\"left\">合并方式</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">AvgMerge</td>\n",
    "          <td align=\"center\">均匀合并</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">ZkMerge</td>\n",
    "          <td align=\"center\">宽度上合并</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-12 14:27:33:success save json: D:\\pad_before\\21_rect\\OK_aug1_segment_m0\\merge.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import api,os\n",
    "jf = r\"D:\\pad_before\\21_rect\\OK_aug1_segment\\aug.json\"\n",
    "src = os.path.dirname(jf)\n",
    "jf = None\n",
    "dst = src+\"_m0\"\n",
    "api.img_merge_api(\"ZkMerge\", src, jf, dst,size=2048) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 图像增强"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\"> 由于同一批数据会多次执行,dst要以 \"_xx\" 命名,新生成的图片名会以 \"_\" 后的名称添加后缀</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 22/22 [00:01<00:00, 18.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-12 14:33:29:success save json: D:\\pad_before\\21_rect\\OK_aug1_segment_m0_aug1\\aug.json \u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "from dpp.dataset.transforms.augmentation import *\n",
    "tfms = [\n",
    "        # HFlipTransform(),\n",
    "        # VFlipTransform(),\n",
    "        # HVFlipTransform(),\n",
    "        # ConstrastTransform((1, 1.5)),\n",
    "        # BrightnessTransform((0.5, 1)),\n",
    "        RotationTransform(-90),\n",
    "        # ScaleTransform((0.5, 0.5))\n",
    "        ]\n",
    "jf = r\"D:\\pad_before\\21_rect\\OK_aug1_segment_m0\\merge.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_aug1\"\n",
    "api.img_aug_api(img_path, jf, dst, tfms)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 背景置黑裁剪"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <td align=\"left\">multi</td>\n",
    "          <td align=\"center\">True: 一张图上n个缺陷各自置黑,生成n张原图</br>False: 一张图上n个缺陷以外全部置黑,生成1张原图</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">crop</td>\n",
    "          <td align=\"center\">置黑后是否裁剪小图</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">pad</td>\n",
    "          <td align=\"center\">小图填充数值(四周填充)</br>float: 小图宽高*比值；填充大小</br>int: 具体填充大小</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 35/35 [01:11<00:00,  2.05s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-03-02 09:33:14:success save json: D:\\PAD\\line\\images\\val_fill2/crop\\crop.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\PAD\\line\\images\\val\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_fill2\"\n",
    "api.fill_crop_via_api(img_path,jf,dst,multi=False,crop=True,pad=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 多区域置黑"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">将标注以外区域置黑，包含检测区非检测区，以标签id区分；</br>可配合产品套图点位json<接口：json 映射复制>快速生成，再适当调整标注</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\sel_img1\\ann_7.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_fill\"\n",
    "api.fill_crop_multi_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  中框矩形框外置黑或裁剪"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">适用于中框，PAD，笔电侧面成像背景区域置黑；只支持单个矩形框</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rect_jf = r\"C:\\Users\\lubin\\Downloads\\via_export_json (6).json\"\n",
    "img_path = r\"C:\\Users\\lubin\\Desktop\\images\"\n",
    "offset = 0\n",
    "dst = img_path+\"_fill\"\n",
    "api.fill_rect_api(img_path,dst,rect_jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 裁剪矩形框"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask_jf = r\"C:\\Users\\lubin\\Downloads\\via_export_json (7).json\"\n",
    "rect_jf = r\"C:\\Users\\lubin\\Downloads\\via_export_json (6).json\"\n",
    "img_path = r\"C:\\Users\\lubin\\Desktop\\images\"\n",
    "offset = 20\n",
    "dst = img_path+\"_fill\"\n",
    "api.crop_rect_api(img_path,dst,rect_jf,mask_jf,offset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 填充矩形框"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = \n",
    "jf = \n",
    "dst = \n",
    "api.fill_crop_multi_api(img_path,jf,dst):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 图像填充"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████████| 157/157 [00:06<00:00, 23.36it/s]\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"D:\\PAD\\ok\\s2_merge\\fill\"\n",
    "dst = img_path+\"_fill\"\n",
    "pad_size=(2048,2048)\n",
    "api.img_pad_api(img_path, dst,pad_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 格式/灰度转换"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <th align=\"left\">color</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">J2B</td>\n",
    "          <td align=\"center\">jpg->bmp</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">B2J</td>\n",
    "          <td align=\"center\">bmp->jpg</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">B2B</td>\n",
    "          <td align=\"center\">bmp->bmp</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">J2J</td>\n",
    "          <td align=\"center\">jpg->jpg</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>\n",
    "<div style=\"float:left; margin-left:50px\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <th align=\"left\">out_channel</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">3</td>\n",
    "          <td align=\"center\">灰度图</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">1</td>\n",
    "          <td align=\"center\">彩色图</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 75/75 [00:05<00:00, 14.27it/s]\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"C:\\Users\\lubin\\Desktop\\0506\\c1_merge_rect\\2_segment\"\n",
    "dst = img_path\n",
    "color = \"J2J\"   \n",
    "out_channel = 3\n",
    "api.convert_format_api(img_path, dst, color, out_channel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 图像分类"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别裁切小图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">根据 json标签生成以标签命名的文件夹，每个文件夹保存相应类别小图</p>\n",
    "<div style=\"float:left\">\n",
    "    <table>\n",
    "    <tr>\n",
    "        <th>参数</th>\n",
    "    <tr/>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>scale</b></td> \n",
    "        <td align=\"center\">False</td>\n",
    "        <td align=\"left\" rowspan=\"2\">GT_BOX偏移offset裁剪<br>输出大小与缺陷本身大小接近,长宽比偏大时不清晰</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>offset</b></td>\n",
    "        <td align=\"center\">50</td> \n",
    "    </tr>\n",
    "    </table>\n",
    "</div>\n",
    "<div style=\"margin-left:20px\">\n",
    "    <table>\n",
    "    <tr>\n",
    "        <th>参数</th>\n",
    "    <tr/>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>scale</b></td> \n",
    "        <td align=\"center\">True</td>\n",
    "        <td align=\"left\" rowspan=\"2\">以crop_size的倍数裁剪缺陷<br>输出缺陷总体比列接近,含有的背景更多</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>crop_size</b></td>\n",
    "        <td align=\"center\">120</td> \n",
    "    </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████| 4100/4100 [09:39<00:00,  7.07it/s]\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_classify\"\n",
    "api.crop_small_img_api(img_path, jf, dst, scale=True,offset=0,crop_size=256)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别裁切小图+json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████| 4100/4100 [08:54<00:00,  7.67it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-06-25 14:24:51:success save json: D:\\project\\pad_before\\train\\images\\NG_classify1\\crop_img.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\project\\pad_before\\train\\images\\NG\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_classify1\"\n",
    "api.crop_small_img_json_api(img_path, jf, dst, scale=True,offset=0, crop_size=256)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别小图生成JSON"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">手动调整各个类别文件夹中小图后,生成分类后的json</p>\n",
    "<p style=\"color:red;font-weight:bold\">可手动创建 <i>mark</i>,<i>del</i> 两个文件夹用于挑选需要重新标注和需要删除的原图</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████████████████████████████████████████████| 23/23 [00:00<00:00, 539.28it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-05-22 20:40:47:success save json: D:\\pad_before\\train\\images\\NG\\reclassify.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"D:\\pad_before\\train\\images_classify\"\n",
    "jf = r\"D:\\pad_before\\train\\images\\NG\\ng.json\"\n",
    "dst = os.path.dirname(jf)\n",
    "api.classify_json_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 机器学习分类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 训练相关"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 计算数据集均值方差"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████████| 572/572 [00:01<00:00, 440.16it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "image length : 572\n",
      "cfg.MODEL.PIXEL_MEAN = [117.99, 117.99, 117.99]\n",
      "cfg.MODEL.PIXEL_STD = [31.35, 31.35, 31.35]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"D:\\project\\pad_before\\train\\images\\NG_classify1\\19\"\n",
    "channel = 3   # 通道\n",
    "api.cal_mean_std_api(img_path,channel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 生成COCO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\val\\32m\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = os.path.dirname(img_path)+'/annotations'\n",
    "api.save_coco_api(img_path, jf, dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 生成npz\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "python prepare_npz.py --dataset-name ./"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 训练脚本"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "python train.py --num-gpus 2 --dist-url auto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 现场数据操作"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 合并量跑原始数据"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">合并机台套图ORIG/NG/OK/Splice;名称为产品号-图片名(1-1_1_3.bmp)</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"\\\\Ds418\\NAS3\\A-PAD\\raw_data\\20230227\\2-24\\2-24-待检品量跑套图54\"\n",
    "dst = r\"D:\\PAD\\jpg\"\n",
    "result = \"ORIG\" # NG OK Splice ORIG\n",
    "api.move_img_by_product_api(img_path,dst,result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 筛选机台NG数据"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">筛选机台NG/OK结果图及原图</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import api\n",
    "img_path = r\"\\\\TEST03slave\\ipad\\BackPlaneA\\01-code\\BackPlaneA\\x64\\Release\\Data\\X12\\Image\\272\\0220\"\n",
    "dst = r\"C:\\Users\\lubin\\Desktop\\gpus\\ng\"\n",
    "result = \"NG\" # NG OK \n",
    "api.move_img_by_result_api(img_path,dst,result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 现场命名纠正"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">中文及下划线中划线修复</p>\n",
    "<div style=\"float:left; margin-left:50px\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <td align=\"left\">jf</td>\n",
    "          <td align=\"center\">json不需修改时为None</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">start</td>\n",
    "          <td align=\"center\">前缀：部分图片中含有固定批次加下划线名称的前缀</br>例：352_168_1_1_2.bmp中352表示批次，168表示产品号，所以start为352_</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"\"\n",
    "jf = None\n",
    "dst = r\"\"\n",
    "start = \"\"\n",
    "api.check_filename_api(img_path,jf,dst,start):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 根据结果图排列=>原图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">适用于机台NG结果图数据分类后；原图按照结果图分类</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '\\\\\\\\Ds418\\\\NAS3\\\\A-PAD-new\\\\ann_data\\\\20230323\\\\PAD_1L_0323_NG_CJ_1-1_1_8.bmp'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32mC:\\software\\anaconda\\envs\\dpp\\lib\\shutil.py\u001b[0m in \u001b[0;36mmove\u001b[1;34m(src, dst, copy_function)\u001b[0m\n\u001b[0;32m    556\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 557\u001b[1;33m         \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreal_dst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    558\u001b[0m     \u001b[1;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [WinError 2] 系统找不到指定的文件。: '\\\\\\\\Ds418\\\\NAS3\\\\A-PAD-new\\\\ann_data\\\\20230323\\\\PAD_1L_0323_NG_CJ_1-1_1_8.bmp' -> '\\\\\\\\Ds418\\\\NAS3\\\\A-PAD-new\\\\ann_data\\\\20230323\\\\PAD_1L_0323_NG_CJ_1-1_1_8.bmp'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_31700\\1639862163.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mresult_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34mr\"\\\\Ds418\\NAS3\\A-PAD-new\\ann_data\\20230323_rect\\submit\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mdst\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34mr\"\\\\Ds418\\NAS3\\A-PAD-new\\ann_data\\20230323\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mapi\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marrange_img_by_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\file_move.py\u001b[0m in \u001b[0;36marrange_img_by_result\u001b[1;34m(result_path, dst)\u001b[0m\n\u001b[0;32m     67\u001b[0m           \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mout_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     68\u001b[0m             \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mout_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 69\u001b[1;33m           \u001b[0mshutil\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\".jpg\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\".bmp\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mout_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mitem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\".jpg\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\".bmp\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     70\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     71\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\software\\anaconda\\envs\\dpp\\lib\\shutil.py\u001b[0m in \u001b[0;36mmove\u001b[1;34m(src, dst, copy_function)\u001b[0m\n\u001b[0;32m    569\u001b[0m             \u001b[0mrmtree\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    570\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 571\u001b[1;33m             \u001b[0mcopy_function\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreal_dst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    572\u001b[0m             \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0munlink\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    573\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mreal_dst\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\software\\anaconda\\envs\\dpp\\lib\\shutil.py\u001b[0m in \u001b[0;36mcopy2\u001b[1;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[0;32m    255\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0misdir\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    256\u001b[0m         \u001b[0mdst\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbasename\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 257\u001b[1;33m     \u001b[0mcopyfile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfollow_symlinks\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfollow_symlinks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    258\u001b[0m     \u001b[0mcopystat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfollow_symlinks\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfollow_symlinks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    259\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\software\\anaconda\\envs\\dpp\\lib\\shutil.py\u001b[0m in \u001b[0;36mcopyfile\u001b[1;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[0;32m    118\u001b[0m         \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msymlink\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreadlink\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    119\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 120\u001b[1;33m         \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'rb'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mfsrc\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    121\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'wb'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mfdst\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    122\u001b[0m                 \u001b[0mcopyfileobj\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfsrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '\\\\\\\\Ds418\\\\NAS3\\\\A-PAD-new\\\\ann_data\\\\20230323\\\\PAD_1L_0323_NG_CJ_1-1_1_8.bmp'"
     ]
    }
   ],
   "source": [
    "result_path = r\"\\\\Ds418\\NAS3\\A-PAD-new\\ann_data\\20230323_rect\\submit\"\n",
    "dst = r\"\\\\Ds418\\NAS3\\A-PAD-new\\ann_data\\20230323\"\n",
    "api.arrange_img_by_result(result_path,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "分析训练数据集，生成数据分析报告"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-06-07T17:09:03.700221Z",
     "start_time": "2023-06-07T17:09:02.307356Z"
    },
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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lJHcnPterdaaDhw4wIcffkhAQABTpkzB19eXnJwc11j069at40c/+hF//OMfsdvtLFy4kKFDh/Ltt99SWVnJT3/6U7p27drk9xOR9kPhLm1eY4F57NgxXnjhBcCYlGXw4MH17nf77bezZ8+eOvfYmxLuTQnsaxkVbt++fa656evz+9//vs62FStWuPofHDp0qN4pZ6uqqjh37hzr16/njjvuaHZdIuL5FO7S5jUUrlVVVTz88MOcO3eO0NBQ12Vrp8rKSo4dO4bFYmHhwoX1BnBjoex836YEd337VFdXc/HiRaqqqqisrCQsLKzWZfu+ffsyc+ZM/Pz88Pf3Jy8vj3fffdfVPmPGDH74wx+6XqeyspL+/fvz//7f/wOuPuWsc2paEWl/FO7isZ588kny8vIAiIuL44MPPnB1bAPjSYljx46RlpbG3Xfffc3v89lnnzX5zPz111/n9ddfr7ft4MGDREdHu9b79+9P//79AWOApdmzZ+Pl5UVQUBA2m42UlBQ++OADxo0b53pMbv/+/XzxxRcEBQXxzTff1Ors93//7//lr3/9KytWrODXv/61azpYEWl/FO7ikZ566imWLFmCv78/gwcPZuPGjTz88MOsWrUKf39//vu//5t169bx85//nLlz517TezhnCAwODr7my9vV1dWcP3+eioqKBjvmFRcXc99991FaWsrMmTP529/+xhdffMG6deuYNm0aH3zwAVu3bqVDhw6sXLkSgOjo6Dq9+J2zHYaGhmoWLZF2TuEuHufEiRNs374dPz8/3n77bYYOHcp9993Hu+++S3x8PLfffjtLly7ltttu44MPPmj2s+dOFy5cACAmJoaPPvroRn4El7feeovx48dz5swZHn/8cV588UXef/99AIYNG8aOHTvYuHEjv/3tb3n77bdZvXo1AP/+97/rTO3qDHd1shMRhbt4nJtvvpldu3axZ88e7rnnHsAYaS4uLo7du3eze/dufvSjH7Ft2zZCQ0Ov+X3Onz8PNH9gmqaw2WyMHTuW9957D4D09HTXVMaVlZWA0adg5cqV3HHHHfz9739n3rx5HD58GDDmVjh06BB9+vRxvaZzFsOePXve8HpFxLPoOXfxSB07duSee+7B4XCwfft2HnzwQQoLC/Hz88PPz4+vv/6aIUOG8Oc//5n//Oc/1/Qep0+fBlom3Dt16kRqaiod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SX5+PoMHD6ZLly5NPs5msxEcHIzVaqVTp04tWKGISOvqNW1Ds/YvCUhu/pvMsjb/mO/p9+/18Zgz9+sRHh5OeHi4u8sQERFpFR7ToU5ERESaRuEuIiJiMgp3ERERk1G4i4iImIzCXURExGQU7iIiIiajcBcRETEZhbuIiIjJKNxFRERMRuEuIiJiMgp3ERERk1G4i4iImIzCXURExGQU7iIiIiajcBcRETEZhbuIiIjJKNxFRERMRuEuIiJiMgp3ERERk1G4i4iImIzCXURExGQU7iIiIiajcBcRETEZhbuIiIjJKNxFRERMRuEuIiJiMgp3ERERk1G4i4iImIzCXURExGQU7iIiIiajcBcRETEZhbuIiIjJKNxFRERMRuEuIiJiMh4X7qWlpezatYvTp0+7uxQREZE2yaPCfc2aNURHRzNp0iR69OjBmjVrACgsLCQ2NpbQ0FDS09NxOByuYxprExERMSOPCfczZ86QlpbGzp072bt3L0uXLuW5557DbrczYsQIBg0aRH5+PkVFReTk5AA02iYiImJWHhPu5eXlLFiwgP79+wMwYMAAysrK2LhxI1arlfnz59O7d28yMjJYvnw5QKNtIiIiZuXj7gKaKiIigpSUFACqqqqYN28eo0aNoqCggLi4OAIDAwGIiYmhqKgIoNG2+tjtdux2u2vdZrO11McRERFpMR5z5u5UUFBA165d2bJlCwsWLMBmsxEZGelqt1gseHt7U1ZW1mhbfTIzMwkODnYtERERLf55REREbjSPC/eYmBi2bdtGv379SE1NxcfHB39//1r7BAQEUFFR0WhbfaZPn47VanUtx48fb7HPISIi0lI8LtwtFgu33347OTk5rFu3jrCwME6dOlVrn/Lycvz8/Bptq4+/vz+dOnWqtYiIiHgajwn37du3k56e7lr38TG6C/Tt25e8vDzX9pKSEux2O2FhYcTGxjbYJiIiYlYeE+59+/Zl6dKlZGdnc/z4caZNm8awYcMYPnw4VquV3NxcALKyshg6dCje3t7Ex8c32CYiImJWHhPu3bt356233mLBggX069ePiooKVqxYgY+PD9nZ2Tz++ON07dqVt99+m6ysLIBG20RERMzK4jDJkG0nT54kPz+fwYMH06VLlya3NcZmsxEcHIzVatX9dxExlV7TNjRr/5KA5Oa/ySxr84/5nn7/Xh+Pec79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69atNWPGDH3++edVviR5qn379tqwYYMeeOABpaamaunSpTpx4oSuuuoqdezYUW+88YZuvvlmr5cDhDrCHWErNja22h5kVFSUfc/6zTff1CWXXKIbb7xRM2bMqHEeGzdu1PXXX69vv/3Wvrct2c5rFxUVqXv37nryySdVUlKisrIylwIwJydH5eXlKi8vd3ov96pVq/T4449r5syZ9nYxMTGaPn264uLi9OKLL+qtt97S4cOHJUl//vOfNXbsWIdP45OktWvX6pNPPql2ZX9ubq6k6uEuSbfccov98L0xptb1O/vIR02ysrJ07rnnau7cubr55pu1Z88eh3cQAKiOcEfYMsbIYrHYAykrK0t5eXmSbIehX375Zd19992aOnWqVq5cqbfeeqvaPNq1a6ePPvpIt956qyZPnmwfHhERobi4OEVGRio2NlYxMTE+vy978ODBWrp0aZXb7irt3btXzz33nKZPn27/QvHaa6/pwIEDevjhh2uc3/r163XjjTfq+uuvV3p6epVxP/zwg5KTk5WQkOC0pjOfS3+2hQsXauLEifr555/tpy8qnX2Eonnz5nrrrbcUHR2tm2++WRdddJG+/fbbKm1c+ZIAhCvOuSNsnTp1SvPmzdPMmTPVsmVL/fGPf9S+ffvUv39/3XrrrUpNTdWdd96pyMhITZs2TbfffrsSExP129/+1n7F+bnnnqvDhw+rcePG1eZdk8qn4FWyWq36/PPPq5yHb968eZVp2rZta///vffea/9/dHS0brzxRvt8K5WWlmrcuHEaMGBAlce/tmrVStOnT9fEiRM1atQo+wNw8vLyNGvWLD3zzDPq37+/3n77bfs0S5Ys0ddff63XX39dffr0qWWLyv78+zPXr7K2gwcP2p9/f8UVV1SZrrJDnMrD/5LtYr+uXbvqkUcesV+hXzm+oKDA4eNwAUgyQJj68ccfzZ49e0xpaal9WH5+vhk5cqRJSUkxe/furdJ+woQJJjIy0jz99NNm1qxZ5vzzz682z/fee89IcvqaOXOmvf3//u//mr59+5rCwsJaXzfccIOZMGFCjeuSkZFhUlJSTFlZmbnhhhtMy5YtzeHDh6u1q6ioMN27dzcXX3yxfdj9999v4uPjzbPPPmvKysqqtF+6dKlp3ry5GTdunMnJyXFtw55h9uzZpm3btsYYY6xWq8N2d955Z63b7exX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/6LorC5XanbG0e+ao+HOPouO6g9m7v6tqW2auvj7GNYM/OLIkSOmT58+RpLJysoKyDLefPNNI8ksWLDAGGNMZmamady4sVm6dKn5+eefzY033mj69evn0bIdzSszM9OkpqaarVu3mv3795vbbrvN/OpXvzLGGJOXl2fOOecc88033xhjjFm0aJFJS0vzaPk1raOr63f2dvFE3759zQcffGDy8vJMXl6eKSgosI/75ptvTGJiosnMzHR5GnctWLDASKr2WrBggfnmm2/MZZddZpKTk81DDz1krFZrtekfeeQRk56e7tGynf2MK529jUtKSuzrnZeXZ7Kzs80555xj9uzZ4/by16xZYxISEszHH39s9u3bZ6677jpz+eWXO63LlZqdcfS75mi4s8+io/prc/ToUdOmTZsqy3n//fdN27ZtTWRkpOnVq5fZtWuXMcb558MY49JnxJX1r1TT75Szaeri72O4I9z95KqrrjIvvfSSXz+8zpZx7Ngxk5KSYi644AL7L9yqVavMnDlz7G3Wrl1rYmJiPFq2o3m988475sYbb7QPX7dunWnevLkxxpiffvrJvPnmm/ZxO3bsMImJiR4t35jq6+jK+tW0XdxVVlZmEhMTTWFhYbVxVqvV9OvXzzzxxBMuT+MJR2H53XffmTZt2pi7777bZGZmmuuuu878/e9/rzKtoy8frnL2MzbGtW38zDPPmLvuusuj5d98881m8uTJ9vfffvutkWSWLFnisK7aaq6No981R8OdfRYd1X/06FGHy68pDJ19gXD2ZerUqVO1fkZcXX9jHP+8nU1TF38fwx3h7ieVeyT+/PA6W8b48ePNPffcY2699VaHf2DnzJljunTp4pNaKuf17bffmqZNm5qvvvrKHD9+3IwePdrccsst1dqXlpaam2++2dx6660eL7O2daxp/VzZLrX56quvTEJCgjn//PNNgwYNzDXXXGP2799vjDHmlVdeMfHx8ebvf/+7WbVqlSktLa11Gl+oDMvly5ebxo0bm5MnTxpjjNm+fbvp37+/vZ2jLx/uqO1nXNs2Li4uNueee67HvxfXXnuteeGFF+zvv/vuOyPJbN++3WFdrn4uHXH0u+bq7/mZn0VH9R8/ftzh9DWFoTtf1s/8MlXbZ6QmnvytcTZNXfx9DHeEu5/VxYf37GWsXbvWpKammvz8fId/YEtKSsz5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",
      "text/plain": [
       "<Figure size 500x1500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from api import read_json_analysis_api\n",
    "jf = r\"D:\\20230602\\test_image_3\\data_merge.json\"\n",
    "dst = './/image' #报告保存路径\n",
    "read_json_analysis_api(jf, dst=dst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "vscode": {
   "interpreter": {
    "hash": "2fb754d125fc8835b4feb6812995f64fcddf495407b14f2a3d533b8335a57ccb"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
