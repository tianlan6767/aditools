{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import api"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 预处理"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json读取"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\noline\\images\\train\\train.json\"\n",
    "api.read_json_api(jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 现场采集标注重命名"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别采集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">现场按工艺类别采集，每个文件夹以工艺命名<br />类别名必须改成英文(e.g.开裂 -> KL),一个文件夹只有一个标注</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"D:\\PAD\\1\"\n",
    "dst = r\"D:\\PAD\\1ng\"\n",
    "api.rename_classify_folder_api(img_path, dst, start=\"PAD_B_1230_1_NG_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按产品号采集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">现场按照产品号采集，每个产品号文件夹有n张图片和1个json</p> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"\\\\Ds418\\nas3\\laptop\\raw_data\\20221105\\1105-键盘C1-已检出NG-20pcs\"\n",
    "dst = img_path\n",
    "api.rename_product_folder_api(img_path, dst, start=\"laptop_C1_1105_1_CJ_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 单文件夹采集"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">最常用的采集方式,只有1个文件夹,里面有n张图片和1个json</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"\\\\Ds418\\nas3\\A-PAD\\ann_data\\20230221\\undetected\\via_export_json (6).json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = r\"D:\\PAD\\add\"\n",
    "api.rename_one_folder_api(img_path, jf, dst,start=\"PAD_B_0221_NG_LJ_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OK图重命名"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 重命名图片"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"D:\\PAD\\4\"\n",
    "dst = img_path\n",
    "api.rename_img_api(img_path, dst, start=\"PAD_B_0105_NG_DJP_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 重命名图片+生成标注"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">常用于负样本生成</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"D:\\PAD\\92\\4\"\n",
    "dst = img_path\n",
    "api.rename_img_json_api(img_path,dst, start=\"\")#PAD_B_0109_OK_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## JSON操作"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json合并"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf_path = r\"D:\\PAD\\add\"\n",
    "api.merge_json_api(jf_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json覆盖"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "old_jf = r\"\\\\Ds418\\NAS3\\A-PAD\\ann_data\\20230105\\submit2\\via_to_json.json\"\n",
    "new_jf = r\"\\\\Ds418\\NAS3\\A-PAD\\ann_data\\20230105\\submit2\\1\\split_mask.json\"\n",
    "dst = os.path.dirname(old_jf)\n",
    "api.json_cover_api(old_jf, new_jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json删除小面积"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf_path = r\n",
    "api.del_small_area_api(jf_path, min_area=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json筛选类别"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\noline\\images\\train\\train.json\"\n",
    "api.filter_labels_api(jf, labels=[4])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json删除空值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import api\n",
    "jf = r\"D:\\PAD\\noline\\images\\train\\filter_labels.json\"\n",
    "api.del_empty_key_api(jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 分段标注"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">将json中长宽比大于limit_rate的标注分段</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import api\n",
    "jf = r\"\\\\Ds418\\NAS3\\A-PAD\\ann_data\\20230105\\submit2\\1\\filter_json.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "limit_rate=12  # 限制长宽比\n",
    "api.split_limit_mask_api(img_path, jf,limit_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json 复制"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">确保一个文件夹中的图片都是一个点位，及只包含一张图片的json</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\222\\via_export_json (7).json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.copy_via_api(jf,img_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json 映射复制"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">映射json需包含所需点位的标注信息,标签可以默认全为1</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_0124_729-1_1_12.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_0250_730-1_1_17.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_0922_735-3_1_1.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1185_737-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1212_738-1_1_11.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1406_739-3_1_1.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1610_741-1_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1651_741-3_1_12.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_1911_743-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2153_745-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2188_746-1_1_19.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2268_746-3_1_3.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2376_747-3_1_11.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2516_748-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_2636_749-3_1_8.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3028_753-1_1_12.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3121_753-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3363_755-3_1_9.jpg,或检查映射json有无该点位标注 \u001b[0m\n",
      "\u001b[1;41m [ERROR]--> D:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py:238 2023-03-03 10:05 点位提取失败，请检查图片名 OQC_flow_20230301_silver_2_OK104_3707_758-3_1_11.jpg,或检查映射json有无该点位标注 \u001b[0m\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'regions'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_90772\\526383604.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mjf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34mr\"D:\\PAD\\sel_img1\\ann_7.json\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mimg_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdirname\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mapi\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmatch_point_json_api\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mD:\\code\\AdiTool\\api.py\u001b[0m in \u001b[0;36mmatch_point_json_api\u001b[1;34m(jf, img_path)\u001b[0m\n\u001b[0;32m    126\u001b[0m     \u001b[0mjson_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mread_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    127\u001b[0m     \u001b[0mimgs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mload_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"img\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 128\u001b[1;33m     \u001b[0mnew_json\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmatch_point_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjson_data\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mimgs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    129\u001b[0m     \u001b[0msave_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnew_json\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'mapper'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    130\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_operate.py\u001b[0m in \u001b[0;36mmatch_point_json\u001b[1;34m(json_data, imgs)\u001b[0m\n\u001b[0;32m    238\u001b[0m             \u001b[0mLogger\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0merror\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"点位提取失败，请检查图片名 {},或检查映射json有无该点位标注\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    239\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mold_dj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjson_format\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'VIA'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 240\u001b[1;33m         \u001b[0mnew_json\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mjson_to_via\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimgs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_json\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    241\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mnew_json\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\json_convert.py\u001b[0m in \u001b[0;36mjson_to_via\u001b[1;34m(imgs, json_data)\u001b[0m\n\u001b[0;32m    127\u001b[0m         \u001b[0mnew_json\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"filename\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    128\u001b[0m         \u001b[0mnew_json\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"size\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msize\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 129\u001b[1;33m         \u001b[0mregions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"regions\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    130\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mregion\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mregions\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    131\u001b[0m             \u001b[0mregion\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shape_attributes\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"name\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"polygon\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'regions'"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\PAD\\sel_img1\\ann_7.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.match_point_json_api(jf,img_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "## json格式转换"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json => via"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\add\\data_merge.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.json_to_via_api(img_path, jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### via => json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">VIA标注软件格式去除后缀</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"C:\\Users\\lubin\\Downloads\\via_export_json (6).json\"\n",
    "api.via_to_json_api(jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### json => yolo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\noline\\images\\val\\val.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = os.path.dirname(img_path)+\"\\labels\"\n",
    "api.json_to_yolo_api(img_path, jf, dst,seg=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 绘制标注"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div>\n",
    "<div style=\"float:left\">\n",
    "  <table border=\"2\" cellspacing=\"10\">\n",
    "    <tr>\n",
    "        <th align=\"left\">参数名</th> \n",
    "        <th align=\"left\">参数值</th> \n",
    "        <th align=\"left\">参数说明</th> \n",
    "    </tr>\n",
    "    <tr>\n",
    "    <td align=\"left\" rowspan=\"2\"><b>shape</b></td>\n",
    "      <td align=\"center\">POLYGON</td>\n",
    "      <td align=\"left\">多边形</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"center\">RECT</td>\n",
    "      <td align=\"left\">矩形</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\" rowspan=\"2\"><b>color</b></td>\n",
    "      <td align=\"center\">False</td>\n",
    "      <td align=\"left\">默认标注json绿色，推理json红色</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"center\">(255,0,0)</td>\n",
    "      <td align=\"left\">颜色信息</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\" rowspan=\"2\"><b>classid</b></td>\n",
    "      <td align=\"center\">False</td>\n",
    "      <td align=\"left\">默认全标签</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"center\">[1,2]</td>\n",
    "      <td align=\"left\">绘制id列表</td> \n",
    "    </tr>\n",
    "  </table>\n",
    "</div>\n",
    "\n",
    "<div style=\"margin-left:10px\"> \n",
    "  <table border=\"2\" cellspacing=\"10\" >\n",
    "    <tr>\n",
    "        <th align=\"left\">参数名</th> \n",
    "        <th align=\"left\">参数值</th> \n",
    "        <th align=\"left\">参数说明</th> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\" ><b>label</b></td>\n",
    "      <td align=\"center\">False/True</td>\n",
    "      <td align=\"left\">标签</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\"><b>score</b></td>\n",
    "      <td align=\"center\">False/True</td> \n",
    "      <td align=\"left\">得分</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\"><b>area</b></td>\n",
    "      <td align=\"center\">False/True</td> \n",
    "      <td align=\"left\">面积</td> \n",
    "    </tr>\n",
    "    <tr>\n",
    "      <td align=\"left\"><b>font_size</b></td>\n",
    "      <td align=\"center\">INT</td> \n",
    "      <td align=\"left\">字体大小</td> \n",
    "    </tr>  \n",
    "  </table>\n",
    "</div>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import api\n",
    "jf = r\"D:\\PAD\\noline\\images\\val\\val.json\"\n",
    "inf_jf = r\"C:\\Users\\lubin\\Desktop\\pad\\NG\\model_0489999.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_rect\"\n",
    "draw={\"shape\":\"RECT\",\"label\":True,\"score\":False,\"area\":False,\"color\":False,\"font_size\":1,\"classid\":False}\n",
    "api.draw_mask_api(img_path, jfs=[jf], dst=dst, spotcheck=False,draw=draw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "## 移动筛选"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 根据图片过滤json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\124\\via_to_json.json\"\n",
    "img_path = r\"D:\\PAD\\124\\DH\"\n",
    "dst = img_path\n",
    "api.filter_json_by_img_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 根据json筛选图片"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\all\\images\\val\\remove_empty.json \"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = r\"D:\\PAD\\all\\images\\pick4\"\n",
    "api.move_img_by_json_api(img_path, jf, dst, move=\"copy\")  # \"move\" | \"copy\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 切分ng/ok图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">img_path为空时只会切分为ng.json/ok.json <br/>img_path不为空时会将图片也切分NG/OK文件夹</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"/media/ps/244e88e1-d2e1-477f-9e37-7b9cb43b842a/LB/train/PAD/images/data_merge.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "api.split_ng_ok_api(img_path, jf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 筛选jpg对应的bmp图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jpg_path = r\"\"\n",
    "img_path = r\"\"\n",
    "dst = jpg_path\n",
    "api.move_bmp_by_jpg_api(jpg_path,img_path,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 图像处理"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 分割"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">相关参数路径：dpp/dataset/transforms/config.yaml</p>\n",
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"0\">\n",
    "        <tr>\n",
    "          <th align=\"left\">分割方式</th>\n",
    "          <th align=\"left\"></th>\n",
    "          <th align=\"left\">config.yaml参数说明</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\" rowspan=\"2\">AvgSeg</td>\n",
    "          <td align=\"center\" rowspan=\"2\">等比分割</td>\n",
    "          <td align=\"left\">crop_size：均分大小</td> \n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">extra：FILL(填充), DROP(丢弃),KEEP(保留)</td> \n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">JsonSeg</td>\n",
    "          <td align=\"center\">软件配置文件分割</td>\n",
    "          <td align=\"left\">jfs：软件每个工位配置文件json</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">CeSeg</td>\n",
    "          <td align=\"center\">3工位侧面相机分割</td>\n",
    "          <td align=\"left\">start,end：自定义起始分割位置</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">Cv2Seg</td>\n",
    "          <td align=\"center\">边缘提取</td>\n",
    "          <td align=\"left\">二值化，卷积等参数</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">ThreeSeg</td>\n",
    "          <td align=\"center\">后盖3工位3000*4096分割</td>\n",
    "          <td align=\"left\">参数固定</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  6%|█████▏                                                                             | 1/16 [00:00<00:08,  1.73it/s]\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'shape'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_90772\\2093504952.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mjf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mdst\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msrc\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"_segment\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mapi\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimg_segment_api\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"AvgSeg\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msrc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mD:\\code\\AdiTool\\api.py\u001b[0m in \u001b[0;36mimg_segment_api\u001b[1;34m(name, img_path, jf, dst)\u001b[0m\n\u001b[0;32m    142\u001b[0m     \u001b[0mimgs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mload_file\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"img\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    143\u001b[0m     \u001b[0mjson_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mread_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 144\u001b[1;33m     \u001b[0mnew_json\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msegment\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mimgs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mjson_data\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    145\u001b[0m     \u001b[0msave_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnew_json\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'segment'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    146\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\transforms\\func.py\u001b[0m in \u001b[0;36msegment\u001b[1;34m(name, imgs, json_data, dst)\u001b[0m\n\u001b[0;32m     17\u001b[0m         \u001b[0mfilename\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbasename\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m         \u001b[0mim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 19\u001b[1;33m         \u001b[0mbox_list\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcrop_im\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m{\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mim\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     20\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjson_data\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m             \u001b[0mregions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mjson_data\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"regions\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\transforms\\segment.py\u001b[0m in \u001b[0;36mcrop_im\u001b[1;34m(self, im_dict)\u001b[0m\n\u001b[0;32m    143\u001b[0m         \u001b[0mfilename\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mim_dict\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    144\u001b[0m         \u001b[0mim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mim_dict\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 145\u001b[1;33m         \u001b[0mbox_list\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_segment_box\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mim\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcrop_size\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcfg\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"crop_size\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mextra\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcfg\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"extra\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    146\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mbox_list\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    147\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\transforms\\segment.py\u001b[0m in \u001b[0;36m_segment_box\u001b[1;34m(im, crop_size, extra)\u001b[0m\n\u001b[0;32m     32\u001b[0m     \"\"\"\n\u001b[0;32m     33\u001b[0m     \u001b[0mcrop_height\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcrop_width\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcrop_size\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcrop_size\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 34\u001b[1;33m     \u001b[0mheight\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mwidth\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     35\u001b[0m     \u001b[0msplit_y\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msplit_x\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mheight\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mcrop_height\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mwidth\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mcrop_width\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     36\u001b[0m     \u001b[0mbox_list\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'shape'"
     ]
    }
   ],
   "source": [
    "import api,os\n",
    "jf = r\"D:\\PAD\\1\\ORIG\\polygon.json\"\n",
    "src = os.path.dirname(jf)\n",
    "jf = None\n",
    "dst = src+\"_segment\"\n",
    "api.img_segment_api(\"JsonSeg\", src, jf, dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 合并"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\"> 由于同一批数据会多次执行,dst要以 \"_xx\" 命名,新生成的图片名会以 \"_\" 后的名称添加后缀</p>\n",
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <th align=\"left\">合并方式</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">AvgMerge</td>\n",
    "          <td align=\"center\">均匀合并</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">ZkMerge</td>\n",
    "          <td align=\"center\">宽度上合并</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import api,os\n",
    "jf = r\"D:\\val\\4444_resize1_segment\\segment.json\"\n",
    "src = os.path.dirname(jf)\n",
    "# jf = None\n",
    "dst = src+\"_m0\"\n",
    "api.img_merge_api(\"AvgMerge\", src, jf, dst,size_w=4096) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 图像增强"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\"> 由于同一批数据会多次执行,dst要以 \"_xx\" 命名,新生成的图片名会以 \"_\" 后的名称添加后缀</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dpp.dataset.transforms.augmentation import *\n",
    "tfms = [HFlipTransform(),\n",
    "        VFlipTransform(),\n",
    "        HVFlipTransform(),\n",
    "        ConstrastTransform((1, 1.5)),\n",
    "        BrightnessTransform((0.5, 1)),\n",
    "        RotationTransform(5),\n",
    "        ScaleTransform((0.5, 0.5))\n",
    "        ]\n",
    "jf = r\"D:\\val\\4444\\via_to_json.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_aug2\"\n",
    "api.img_aug_api(img_path, jf, dst, tfms)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 背景置黑裁剪"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <td align=\"left\">multi</td>\n",
    "          <td align=\"center\">True: 一张图上n个缺陷各自置黑,生成n张原图</br>False: 一张图上n个缺陷以外全部置黑,生成1张原图</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">crop</td>\n",
    "          <td align=\"center\">置黑后是否裁剪小图</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">pad</td>\n",
    "          <td align=\"center\">小图填充数值(四周填充)</br>float: 小图宽高*比值；填充大小</br>int: 具体填充大小</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████| 35/35 [01:11<00:00,  2.05s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;34m [INFO]--> 2023-03-02 09:33:14:success save json: D:\\PAD\\line\\images\\val_fill2/crop\\crop.json \u001b[0m\n"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\PAD\\line\\images\\val\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_fill2\"\n",
    "api.fill_crop_via_api(img_path,jf,dst,multi=False,crop=True,pad=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 多区域置黑"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">将标注以外区域置黑，包含检测区非检测区，以标签id区分；</br>可配合产品套图点位json<接口：json 映射复制>快速生成，再适当调整标注</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|                                                                                          | 0/121 [00:00<?, ?it/s]\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'shape'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_90772\\729375702.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mimg_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdirname\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mdst\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mimg_path\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"_fill\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[0mapi\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfill_crop_multi_api\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mD:\\code\\AdiTool\\api.py\u001b[0m in \u001b[0;36mfill_crop_multi_api\u001b[1;34m(img_path, jf, dst)\u001b[0m\n\u001b[0;32m    192\u001b[0m     \u001b[0mmake_dir\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    193\u001b[0m     \u001b[0mjson_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mread_json\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 194\u001b[1;33m     \u001b[0mfill_crop_multi\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mjson_data\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdst\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    195\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    196\u001b[0m \u001b[1;31m## 数据拆分\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\code\\AdiTool\\dpp\\dataset\\preprocessing\\crop_regions.py\u001b[0m in \u001b[0;36mfill_crop_multi\u001b[1;34m(img_path, json_data, dst)\u001b[0m\n\u001b[0;32m    225\u001b[0m             \u001b[0mfn_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    226\u001b[0m             \u001b[0mim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfn_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 227\u001b[1;33m             \u001b[0mh\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mw\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    228\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m3\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    229\u001b[0m                 \u001b[0mim\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcvtColor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mim\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mCOLOR_BGR2GRAY\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'shape'"
     ]
    }
   ],
   "source": [
    "jf = r\"D:\\PAD\\sel_img1\\ann_7.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_fill\"\n",
    "api.fill_crop_multi_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  侧面相机非检测区置黑"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">适用于中框，PAD，笔电侧面成像背景区域置黑；只支持单个矩形框</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\noline\\images\\ce\\via_export_json (7).json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_fill\"\n",
    "api.fill_crop_rect_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 图像填充"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"D:\\val\\zk\"\n",
    "dst = img_path+\"_fill\"\n",
    "pad_size=(2048,2048)\n",
    "api.img_pad_api(img_path, dst,pad_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 格式/灰度转换"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"float:left\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <th align=\"left\">color</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">J2B</td>\n",
    "          <td align=\"center\">jpg->bmp</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">B2J</td>\n",
    "          <td align=\"center\">bmp->jpg</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">B2B</td>\n",
    "          <td align=\"center\">bmp->bmp</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">J2J</td>\n",
    "          <td align=\"center\">jpg->jpg</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>\n",
    "<div style=\"float:left; margin-left:50px\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <th align=\"left\">out_channel</th>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">3</td>\n",
    "          <td align=\"center\">灰度图</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">1</td>\n",
    "          <td align=\"center\">彩色图</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"C:\\Users\\lubin\\Desktop\\gpus\\ng2\"\n",
    "dst = img_path\n",
    "color = \"J2B\"   \n",
    "out_channel = 1\n",
    "api.convert_format_api(img_path, dst, color, out_channel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 图像分类"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别裁切小图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">根据 json标签生成以标签命名的文件夹，每个文件夹保存相应类别小图</p>\n",
    "<div style=\"float:left\">\n",
    "    <table>\n",
    "    <tr>\n",
    "        <th>参数</th>\n",
    "    <tr/>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>scale</b></td> \n",
    "        <td align=\"center\">False</td>\n",
    "        <td align=\"left\" rowspan=\"2\">GT_BOX偏移offset裁剪<br>输出大小与缺陷本身大小接近,长宽比偏大时不清晰</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>offset</b></td>\n",
    "        <td align=\"center\">50</td> \n",
    "    </tr>\n",
    "    </table>\n",
    "</div>\n",
    "<div style=\"margin-left:20px\">\n",
    "    <table>\n",
    "    <tr>\n",
    "        <th>参数</th>\n",
    "    <tr/>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>scale</b></td> \n",
    "        <td align=\"center\">True</td>\n",
    "        <td align=\"left\" rowspan=\"2\">以crop_size的倍数裁剪缺陷<br>输出缺陷总体比列接近,含有的背景更多</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td align=\"left\"><b>crop_size</b></td>\n",
    "        <td align=\"center\">120</td> \n",
    "    </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\PAD\\ng\\origin_mask.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = img_path+\"_classify\"\n",
    "api.crop_small_img_api(img_path, jf, dst, scale=True,offset=50,crop_size=120)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按类别小图生成JSON"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">手动调整各个类别文件夹中小图后,生成分类后的json</p>\n",
    "<p style=\"color:red;font-weight:bold\">可手动创建 <i>mark</i>,<i>del</i> 两个文件夹用于挑选需要重新标注和需要删除的原图</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"D:\\PAD\\noline\\images\\val_classify\"\n",
    "jf = r\"D:\\PAD\\noline\\images\\val\\val.json\"\n",
    "dst = os.path.dirname(jf)\n",
    "api.classify_json_api(img_path,jf,dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 机器学习分类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 训练相关"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 计算数据集均值方差"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"D:\\val\\32m\"\n",
    "channel = 3   # 通道\n",
    "api.cal_mean_std_api(img_path,channel)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 生成COCO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jf = r\"D:\\val\\32m\\ng.json\"\n",
    "img_path = os.path.dirname(jf)\n",
    "dst = os.path.dirname(img_path)+'/annotations'\n",
    "api.save_coco_api(img_path, jf, dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 生成npz\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "python prepare_npz.py --dataset-name ./"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 训练脚本"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "python train.py --num-gpus 2 --dist-url auto"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 现场数据操作"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 合并量跑原始数据"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">合并机台套图ORIG/NG/OK/Splice;名称为产品号-图片名(1-1_1_3.bmp)</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"\\\\Ds418\\NAS3\\A-PAD\\raw_data\\20230227\\2-24\\2-24-待检品量跑套图54\"\n",
    "dst = r\"D:\\PAD\\jpg\"\n",
    "result = \"ORIG\" # NG OK Splice ORIG\n",
    "api.move_img_by_product_api(img_path,dst,result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 筛选机台NG数据"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">筛选机台NG/OK结果图及原图</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import api\n",
    "img_path = r\"\\\\TEST03slave\\ipad\\BackPlaneA\\01-code\\BackPlaneA\\x64\\Release\\Data\\X12\\Image\\272\\0220\"\n",
    "dst = r\"C:\\Users\\lubin\\Desktop\\gpus\\ng\"\n",
    "result = \"NG\" # NG OK \n",
    "api.move_img_by_result_api(img_path,dst,result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 现场命名纠正"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">中文及下划线中划线修复</p>\n",
    "<div style=\"float:left; margin-left:50px\">\n",
    "    <table border=\"2\" cellspacing=\"30\">\n",
    "        <tr>\n",
    "          <td align=\"left\">jf</td>\n",
    "          <td align=\"center\">json不需修改时为None</td>\n",
    "        </tr>\n",
    "        <tr>\n",
    "          <td align=\"left\">start</td>\n",
    "          <td align=\"center\">前缀：部分图片中含有固定批次加下划线名称的前缀</br>例：352_168_1_1_2.bmp中352表示批次，168表示产品号，所以start为352_</td>\n",
    "        </tr>\n",
    "    </table>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_path = r\"\"\n",
    "jf = None\n",
    "dst = r\"\"\n",
    "start = \"\"\n",
    "api.check_filename_api(img_path,jf,dst,start):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 根据结果图排列=>原图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"color:#409EFF;font-weight:bold\">适用于机台NG结果图数据分类后；原图按照结果图分类</p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result_path = r\"D:\\PAD\\1229\\02ng_rect\"\n",
    "dst = r\"D:\\PAD\\1229\\02ng\"\n",
    "api.arrange_img_by_result(result_path,dst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "vscode": {
   "interpreter": {
    "hash": "2fb754d125fc8835b4feb6812995f64fcddf495407b14f2a3d533b8335a57ccb"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
