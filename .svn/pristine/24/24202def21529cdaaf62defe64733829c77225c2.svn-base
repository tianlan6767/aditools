{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os,shutil,cv2\n",
    "import numpy as np\n",
    "from dpp.dataset.softdata.dbutils_qk import connect_database,query_image\n",
    "from dpp.dataset.softdata.func import gen_full_img,get_no_json_long_img,gen_long_img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 量跑数据中生成excel，json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "批次信息-367,数据查询中...\n",
      "查询完成-135条缺陷,数据解析中...\n",
      "查询完成-1526条OK图,数据解析中...\n",
      "解析完成,共10个产品,1567张图像!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "计算特征: 100%|██████████████████████████| 1567/1567 [00:00<00:00, 22770.88it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "batch_0301.json is saving...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "save successfully! ->PATH: D:\\PAD\\soft\\batch_0301.json\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "保存Excel[batch_0301]数据: 100%|██████████| 1568/1568 [00:00<00:00, 1802.91it/s]\n"
     ]
    }
   ],
   "source": [
    "with connect_database(host='192.168.2.98') as db_connect:\n",
    "    # print(query_production(db_connect, 6))\n",
    "        query_image(db_connect,367, save_type='all', save_image=False, save_thumb=False, save_ok_image = False,\n",
    "                    retrain_filtered=True,\n",
    "                    split_thresh=10000000000000000,\n",
    "                    image_folders=[\n",
    "                        r\"\\\\TEST03slave\\MiddleFrame-A-OQC\\01-project\\x64\\Release\\Data\\X12\\Image\"],\n",
    "                    QC_data=\"\",\n",
    "                    save_path=r\"D:\\PAD\\soft\"\n",
    "                    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 挑选量跑数据中的NG/ORIG数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "src = r\"\\\\TEST03slave\\MiddleFrame-A-OQC\\01-project\\x64\\Release\\Data\\X12\\Image\\370\\0301\"\n",
    "dst = r\"D:\\PAD\\soft\\images\"\n",
    "# os.makedirs(dst)\n",
    "out_ng_path = os.path.join(dst,\"NG\")\n",
    "os.makedirs(out_ng_path)\n",
    "out_orig_path = os.path.join(dst,\"ORIG\")\n",
    "os.makedirs(out_orig_path)\n",
    "products = os.listdir(src)\n",
    "for p in products:  # 产品号\n",
    "    ng_path = os.path.join(src, p, \"outer\",\"NG\")\n",
    "    orig_path = os.path.join(src, p, \"outer\",\"ORIG\")\n",
    "    imgs = os.listdir(ng_path)\n",
    "    for img in imgs:\n",
    "        img_bmp = img.replace(\".jpg\", \".jpg\")   # 原图格式默认jpg\n",
    "        shutil.copy(os.path.join(ng_path, img),\n",
    "                    os.path.join(out_ng_path, \"{}-{}\".format(str(p), img)))\n",
    "        shutil.copy(os.path.join(orig_path, img_bmp),\n",
    "                    os.path.join(out_orig_path, \"{}-{}\".format(str(p), img_bmp)))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 按照NG分类结果对ORIG原图分类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "result_path = r\"D:\\pad_before\\train\\del_rect\"      # 结果图分类路径\n",
    "dst = r\"D:\\pad_before\\train\\del\"            # 原图路径\n",
    "for root,dirs,files in os.walk(result_path):\n",
    "    if files:\n",
    "        for item in files:\n",
    "            out_path = root.replace(result_path,dst)\n",
    "            if not os.path.exists(out_path):\n",
    "                os.makedirs(out_path)\n",
    "            try:\n",
    "                shutil.move(os.path.join(dst,item.replace(\".jpg\",\".jpg\")),os.path.join(out_path,item.replace(\".jpg\",\".jpg\")))\n",
    "            except:\n",
    "                pass\n",
    "        # shutil.move(os.path.join(dst,item.replace(\".jpg\",\".bmp\")),os.path.join(out_path,item.replace(\".jpg\",\".bmp\"))) 原图bmp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 所有缺陷小图按照文件夹分类映射到整图中"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "生成缺陷小图参数字典。。。:   0%|          | 0/10 [00:00<?, ?it/s]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "all the input arrays must have same number of dimensions, but the array at index 0 has 3 dimension(s) and the array at index 1 has 2 dimension(s)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_40552\\4270343323.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mlimit_w\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m240\u001b[0m       \u001b[1;31m# 小图限制大小\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mmax_w\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m2048\u001b[0m        \u001b[1;31m# 合并图最高宽度\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mgen_full_img\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcrop_size\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlimit_w\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mmax_w\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32md:\\code\\AdiTool\\dpp\\dataset\\softdata\\func.py\u001b[0m in \u001b[0;36mgen_full_img\u001b[1;34m(img_path, jf, crop_size, limit_w, max_w)\u001b[0m\n\u001b[0;32m    125\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    126\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mgen_full_img\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcrop_size\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlimit_w\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mmax_w\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 127\u001b[1;33m     \u001b[0mall_imgs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_img_dict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mimg_path\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mjf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcrop_size\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlimit_w\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    128\u001b[0m     \u001b[0mnew_all_imgs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    129\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mall_imgs\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32md:\\code\\AdiTool\\dpp\\dataset\\softdata\\func.py\u001b[0m in \u001b[0;36mget_img_dict\u001b[1;34m(img_path, jf, crop_size, limit_w)\u001b[0m\n\u001b[0;32m     45\u001b[0m                 \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mputText\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstack_im\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"A:\"\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marea\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mcrop_size\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m15\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mFONT_HERSHEY_SIMPLEX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0.5\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m255\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     46\u001b[0m                 \u001b[0mpad_im\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mones\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mh\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m*\u001b[0m\u001b[1;36m255\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 47\u001b[1;33m                 \u001b[0mnew_im\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstack_im\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mpad_im\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     48\u001b[0m                 \u001b[0mfolder_imgs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m{\u001b[0m\u001b[1;34m\"filename\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"fn\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mfn\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"area\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0marea\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"path\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mroot\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"im\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mnew_im\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"index_img\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mindex_img\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"h\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mh\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"w\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     49\u001b[0m                 \u001b[0mhs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mh\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mhstack\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;32mc:\\software\\anaconda\\envs\\dpp\\lib\\site-packages\\numpy\\core\\shape_base.py\u001b[0m in \u001b[0;36mhstack\u001b[1;34m(tup)\u001b[0m\n\u001b[0;32m    344\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    345\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 346\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    347\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    348\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mconcatenate\u001b[1;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: all the input arrays must have same number of dimensions, but the array at index 0 has 3 dimension(s) and the array at index 1 has 2 dimension(s)"
     ]
    }
   ],
   "source": [
    "img_path = r\"\\\\Ds418\\nas3\\A-ZK-OQC\\soft_data\\OQC-0308\\result\\tmp\\1-3_1\"\n",
    "jf = r\"\\\\Ds418\\nas3\\A-ZK-OQC\\soft_data\\OQC-0308\\result\\tmp\\batch_0308.json\"\n",
    "crop_size = 120     # 原图上小图裁剪最小尺寸\n",
    "limit_w = 240       # 小图限制大小\n",
    "max_w = 2048        # 合并图最高宽度\n",
    "gen_full_img(img_path,jf,crop_size,limit_w,max_w)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 已生成好拼接图拼成大图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\1\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\2\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\3\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\4\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\5\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\6\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\7\n",
      "\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\\data\\8\n"
     ]
    }
   ],
   "source": [
    "img_path = r\"\\\\Ds418\\NAS\\share\\LiuPY\\OQC\\camera_nums_1\\train\\1_1 & 3_1\"\n",
    "max_w = 2048\n",
    "max_size = 480\n",
    "      \n",
    "all_imgs = get_no_json_long_img(img_path,max_w,max_size)\n",
    "long_im = gen_long_img(all_imgs,max_w=max_w)\n",
    "\n",
    "h,w = long_im.shape[:2]\n",
    "pad_im = np.ones((h,20,3),dtype=np.uint8)*255\n",
    "new_im = np.hstack((pad_im,long_im))\n",
    "cv2.imencode(\".jpg\",new_im)[1].tofile(os.path.join(img_path,\"{}.jpg\".format(os.path.basename(img_path))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[WinError 2] 系统找不到指定的文件。: '\\\\\\\\Ds418\\\\nas3\\\\A-PAD\\\\ann_data\\\\20230315\\\\0314\\\\Thumbs.db'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_45192\\809824923.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mr\"\\\\Ds418\\nas3\\A-PAD\\ann_data\\20230315\\0314\\Thumbs.db\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [WinError 2] 系统找不到指定的文件。: '\\\\\\\\Ds418\\\\nas3\\\\A-PAD\\\\ann_data\\\\20230315\\\\0314\\\\Thumbs.db'"
     ]
    }
   ],
   "source": [
    "os.remove(r\"\\\\Ds418\\nas3\\A-PAD\\ann_data\\20230315\\0314\\Thumbs.db\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[WinError 2] 系统找不到指定的文件。: '\\\\\\\\Ds418\\\\NAS3\\\\A-PAD-new\\\\ann_data\\\\20230412\\\\Thumbs.db'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp\\ipykernel_59716\\1859463249.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mr'\\\\Ds418\\NAS3\\A-PAD-new\\ann_data\\20230412\\Thumbs.db'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [WinError 2] 系统找不到指定的文件。: '\\\\\\\\Ds418\\\\NAS3\\\\A-PAD-new\\\\ann_data\\\\20230412\\\\Thumbs.db'"
     ]
    }
   ],
   "source": [
    "os.remove(r'\\\\Ds418\\NAS3\\A-PAD-new\\ann_data\\20230412\\Thumbs.db')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  },
  "vscode": {
   "interpreter": {
    "hash": "2fb754d125fc8835b4feb6812995f64fcddf495407b14f2a3d533b8335a57ccb"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
